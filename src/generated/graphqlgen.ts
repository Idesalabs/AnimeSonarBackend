// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Anime, Tag, SubTag } from "../types/models.d";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface SearchAnimeInput {
    searchText: string;
    limit?: string | null;
  }
  export interface SearchTagsInput {
    searchText: string;
    limit?: string | null;
  }
  export interface RecommendAnimeInput {
    tags: RecommendAnimeInputTagInput[];
    subTags?: string[] | null;
    blackList?: string[] | null;
    moodPoint?: number | null;
  }
  export interface RecommendAnimeInputTagInput {
    proportion: number;
    id: string;
  }

  export interface ArgsSearchAnime {
    input: SearchAnimeInput;
  }

  export interface ArgsSearchTags {
    input: SearchTagsInput;
  }

  export interface ArgsSearchSubTags {
    input: SearchTagsInput;
  }

  export interface ArgsRecommendAnime {
    input: RecommendAnimeInput;
  }

  export type SearchAnimeResolver =
    | ((
        parent: undefined,
        args: ArgsSearchAnime,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Anime[] | Promise<Anime[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSearchAnime,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Anime[] | Promise<Anime[]>;
      };

  export type SearchTagsResolver =
    | ((
        parent: undefined,
        args: ArgsSearchTags,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Tag[] | Promise<Tag[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSearchTags,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Tag[] | Promise<Tag[]>;
      };

  export type SearchSubTagsResolver =
    | ((
        parent: undefined,
        args: ArgsSearchSubTags,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => SubTag[] | Promise<SubTag[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSearchSubTags,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => SubTag[] | Promise<SubTag[]>;
      };

  export type RecommendAnimeResolver =
    | ((
        parent: undefined,
        args: ArgsRecommendAnime,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Anime[] | Promise<Anime[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRecommendAnime,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Anime[] | Promise<Anime[]>;
      };

  export interface Type {
    searchAnime:
      | ((
          parent: undefined,
          args: ArgsSearchAnime,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Anime[] | Promise<Anime[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSearchAnime,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Anime[] | Promise<Anime[]>;
        };

    searchTags:
      | ((
          parent: undefined,
          args: ArgsSearchTags,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Tag[] | Promise<Tag[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSearchTags,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Tag[] | Promise<Tag[]>;
        };

    searchSubTags:
      | ((
          parent: undefined,
          args: ArgsSearchSubTags,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => SubTag[] | Promise<SubTag[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSearchSubTags,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => SubTag[] | Promise<SubTag[]>;
        };

    recommendAnime:
      | ((
          parent: undefined,
          args: ArgsRecommendAnime,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Anime[] | Promise<Anime[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRecommendAnime,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Anime[] | Promise<Anime[]>;
        };
  }
}

export namespace AnimeResolvers {
  export const defaultResolvers = {
    title: (parent: Anime) => parent.title,
    description: (parent: Anime) => parent.description,
    minutesPerEpisode: (parent: Anime) => parent.minutesPerEpisode,
    episodeCount: (parent: Anime) => parent.episodeCount,
    id: (parent: Anime) => parent.id
  };

  export type TitleResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type DescriptionResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MinutesPerEpisodeResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type EpisodeCountResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type TagsResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Tag[] | Promise<Tag[]>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Tag[] | Promise<Tag[]>;
      };

  export type SubTagsResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => SubTag[] | null | Promise<SubTag[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => SubTag[] | null | Promise<SubTag[] | null>;
      };

  export type IdResolver =
    | ((
        parent: Anime,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    title:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    description:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    minutesPerEpisode:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    episodeCount:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    tags:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Tag[] | Promise<Tag[]>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Tag[] | Promise<Tag[]>;
        };

    subTags:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => SubTag[] | null | Promise<SubTag[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => SubTag[] | null | Promise<SubTag[] | null>;
        };

    id:
      | ((
          parent: Anime,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Anime,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace TagResolvers {
  export const defaultResolvers = {
    averageRating: (parent: Tag) => parent.averageRating,
    name: (parent: Tag) => parent.name,
    id: (parent: Tag) => parent.id
  };

  export type AverageRatingResolver =
    | ((
        parent: Tag,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Tag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type NameResolver =
    | ((
        parent: Tag,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Tag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type IdResolver =
    | ((
        parent: Tag,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Tag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    averageRating:
      | ((
          parent: Tag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Tag,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    name:
      | ((
          parent: Tag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Tag,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    id:
      | ((
          parent: Tag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Tag,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace SubTagResolvers {
  export const defaultResolvers = {
    id: (parent: SubTag) => parent.id,
    name: (parent: SubTag) => parent.name
  };

  export type IdResolver =
    | ((
        parent: SubTag,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: SubTag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: SubTag,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: SubTag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: SubTag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: SubTag,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: SubTag,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: SubTag,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface RateAnimeInput {
    animeId: string;
    tags: TagInput[];
    subTags?: string[] | null;
  }
  export interface TagInput {
    rating: number;
    id: string;
  }

  export interface ArgsRateAnime {
    input: RateAnimeInput;
  }

  export type RateAnimeResolver =
    | ((
        parent: undefined,
        args: ArgsRateAnime,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRateAnime,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    rateAnime:
      | ((
          parent: undefined,
          args: ArgsRateAnime,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRateAnime,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Anime: AnimeResolvers.Type;
  Tag: TagResolvers.Type;
  SubTag: SubTagResolvers.Type;
  Mutation: MutationResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
